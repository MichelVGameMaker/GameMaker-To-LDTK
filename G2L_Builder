layer_set_tiles(_layer_struct, _tiles_struct) {
	if _layer_struct.resourceType != "GMRTileLayer"
	{
		show_debug_message("[YY: Warning, calling layer_set_tiles() on a struct that is not a proper GM Tile Layer");
		return false;
	}
	_layer_struct.tiles = _tiles_struct;
	return true;
}
layer_set_tileset(_layer_struct, _tileset_name) {
	with(_layer_struct)
	{
		If resourceType != "GMRTileLayer"
		{
			show_debug_message("[YY: Warning, calling layer_set_tileset() on a struct that is not a proper GM Tile Layer");
			return false;
		}
		tilesetId =
		{
			name: _tileset_name,
			path:"tilesets/"+_tileset_name+"/"+_tileset_name+".yy",
		};
	}
	return true;
}
layer_set_visible(_layer_struct, _visible) {
	_layer_struct.visible = _visible;
	return true;
}
layer_set_grid_x(_layer_struct, _grid_x) {
	_layer_struct.gridX= _grid_x;
	return true;
}
layer_set_grid_y(_layer_struct, _grid_y) {
	_layer_struct.gridY= _grid_y;
	return true;
}
layer_set_depth(_layer_struct, _depth) {
	_layer_struct.depth= _depth;
	return true;
}

asset_create(_layer, _x, _y, _sprite_name)
{
	resourceType: "GMRSpriteGraphic",
	resourceVersion: "1.0",
	name: _sprite_name+string(__asset_token++),
	spriteId:
	{
		name: _sprite_name,
		path: "sprites/"+_sprite_name+"/"+_sprite_name+".yy"
	},
	headPosition: 0.0,
	rotation: 0.0,
	scaleX: 1.0, 
	scaleY: 1.0,
	animationSpeed: 1.0,
	colour:4294967295,
	inheritedItemId: null,
	frozen:	false,
	ignore: false,
	inheritItemSettings: false,
	x: _x,
	y: _y,
}

asset_set_image_xscale(_asset_struct, _scale) {
	_asset_struct.scaleX = _scale;
}
asset_set_image_yscale(_asset_struct, _scale) {
	_asset_struct.scaleY = _scale;
}
asset_set_image_blend(_asset_struct, _blend) {
	_asset_struct.colour = _blend;
}
asset_set_image_angle(_asset_struct, _angle) {
	_asset_struct.rotation = _angle;
}
asset_set_image_speed(_asset_struct, _speed) {
	_asset_struct.animationSpeed = _speed;
}
asset_set_x(_asset_struct, _x) {
	_asset_struct.x = _x;
}
asset_set_y(_asset_struct, _y) {
	_asset_struct.y = _y;
}


var _tiles_number = array_length(tiles);
show_debug_message("Tiles number");
show_debug_message(string(_tiles_number)); // actual lentght of array of tiles
show_debug_message(string(_width_in_tiles*_height_in_tiles));  // calculated length of tiles data
var _grid_size    = layer.__gridSize;
var _width_in_tiles  = _.room_get_width()/_gridSize;
var _height_in_tiles = _.room_get_height()/_gridSize;
var _width_in_tiles  = layer.__cWid
var _height_in_tiles = layer.__cHei
show_debug_message("Cells width");
show_debug_message(string(layer.__cWid));  // actual nb of tiles
show_debug_message(string(_.room_get_width()/_gridSize)); // calculated nb of tiles


tiles_struct[$ layer_name+"_1"] = array_create(_width_in_tiles*_height_in_tiles);
var tile_index = 0;
while (_cel < _tiles_number) {
	tile_index = (tiles[_cel].px[0]/gridSize) + (tiles[_cel].px[1]/gridSize * l.__cWid);
	var layer_n = 1;
	while (tiles_struct[$ layer_name+"_"+string(layer_n)][tile_index] != 0) {
		layer_n++;
		if (!variable_struct_exists(tiles_struct,layer_name+"_"+string(layer_n))) {
			tiles_struct[$ layer_name+"_"+string(layer_n)] = array_create((rm.width/gridSize)*(rm.height/gridSize));
		}
	}
	_cel++;
}

tiles = {
	SerialiseWidth  : _width_in_tiles,
	SerialiseHeight : _height_in_tiles,
	TileSerialiseData : "", // from above
};

